{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "pip install tensorflow keras keras-tuner"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "o5std_qjm73R",
        "outputId": "ff4bc774-77e7-42be-9fd2-3c6e16a2021a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: tensorflow in /usr/local/lib/python3.10/dist-packages (2.17.0)\n",
            "Requirement already satisfied: keras in /usr/local/lib/python3.10/dist-packages (3.4.1)\n",
            "Collecting keras-tuner\n",
            "  Downloading keras_tuner-1.4.7-py3-none-any.whl.metadata (5.4 kB)\n",
            "Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.4.0)\n",
            "Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.6.3)\n",
            "Requirement already satisfied: flatbuffers>=24.3.25 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (24.3.25)\n",
            "Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.6.0)\n",
            "Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.2.0)\n",
            "Requirement already satisfied: h5py>=3.10.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.11.0)\n",
            "Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (18.1.1)\n",
            "Requirement already satisfied: ml-dtypes<0.5.0,>=0.3.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.4.0)\n",
            "Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.3.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from tensorflow) (24.1)\n",
            "Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.20.3)\n",
            "Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.32.3)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from tensorflow) (71.0.4)\n",
            "Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.16.0)\n",
            "Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.4.0)\n",
            "Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (4.12.2)\n",
            "Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.16.0)\n",
            "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.64.1)\n",
            "Requirement already satisfied: tensorboard<2.18,>=2.17 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.17.0)\n",
            "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.37.1)\n",
            "Requirement already satisfied: numpy<2.0.0,>=1.23.5 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.26.4)\n",
            "Requirement already satisfied: rich in /usr/local/lib/python3.10/dist-packages (from keras) (13.8.1)\n",
            "Requirement already satisfied: namex in /usr/local/lib/python3.10/dist-packages (from keras) (0.0.8)\n",
            "Requirement already satisfied: optree in /usr/local/lib/python3.10/dist-packages (from keras) (0.12.1)\n",
            "Collecting kt-legacy (from keras-tuner)\n",
            "  Downloading kt_legacy-1.0.5-py3-none-any.whl.metadata (221 bytes)\n",
            "Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from astunparse>=1.6.0->tensorflow) (0.44.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.8)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow) (2024.8.30)\n",
            "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (3.7)\n",
            "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (0.7.2)\n",
            "Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (3.0.4)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich->keras) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from rich->keras) (2.16.1)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=2.2.0->rich->keras) (0.1.2)\n",
            "Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from werkzeug>=1.0.1->tensorboard<2.18,>=2.17->tensorflow) (2.1.5)\n",
            "Downloading keras_tuner-1.4.7-py3-none-any.whl (129 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m129.1/129.1 kB\u001b[0m \u001b[31m1.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading kt_legacy-1.0.5-py3-none-any.whl (9.6 kB)\n",
            "Installing collected packages: kt-legacy, keras-tuner\n",
            "Successfully installed keras-tuner-1.4.7 kt-legacy-1.0.5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras.datasets import mnist\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "\n",
        "# Load the MNIST dataset\n",
        "(train_images, train_labels), (test_images, test_labels) = mnist.load_data()\n",
        "\n",
        "# Normalize the images\n",
        "train_images = train_images.astype('float32') / 255.0\n",
        "test_images = test_images.astype('float32') / 255.0\n",
        "\n",
        "# Reshape the images to add a channel dimension\n",
        "train_images = train_images.reshape((train_images.shape[0], 28, 28, 1))\n",
        "test_images = test_images.reshape((test_images.shape[0], 28, 28, 1))\n",
        "\n",
        "# Convert labels to one-hot encoding\n",
        "train_labels = to_categorical(train_labels, 10)\n",
        "test_labels = to_categorical(test_labels, 10)\n",
        "\n",
        "# Split training data into training and validation sets\n",
        "from sklearn.model_selection import train_test_split\n",
        "train_images, val_images, train_labels, val_labels = train_test_split(train_images, train_labels, test_size=0.2)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Xa9RgeQkm8eB",
        "outputId": "1c64e442-e6ea-46c3-edc1-39b7923a5a11"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
            "\u001b[1m11490434/11490434\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def build_model(hp):\n",
        "    model = tf.keras.Sequential()\n",
        "\n",
        "    # Add convolutional layers with hyperparameter tuning for number of filters\n",
        "    model.add(tf.keras.layers.Conv2D(filters=hp.Int('filters', min_value=32, max_value=128, step=32),\n",
        "                                     kernel_size=(3, 3),\n",
        "                                     activation='relu',\n",
        "                                     input_shape=(28, 28, 1)))\n",
        "    model.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2)))\n",
        "    model.add(tf.keras.layers.Flatten())\n",
        "    model.add(tf.keras.layers.Dense(hp.Int('units', min_value=32, max_value=512, step=32), activation='relu'))\n",
        "\n",
        "    # Output layer\n",
        "    model.add(tf.keras.layers.Dense(10, activation='softmax'))\n",
        "\n",
        "    # Compile the model\n",
        "    model.compile(optimizer=tf.keras.optimizers.Adam(hp.Choice('learning_rate', values=[1e-2, 1e-3, 1e-4])),\n",
        "                  loss='categorical_crossentropy',\n",
        "                  metrics=['accuracy'])\n",
        "\n",
        "    return model\n"
      ],
      "metadata": {
        "id": "hg084fTXm-s5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from kerastuner.tuners import RandomSearch\n",
        "\n",
        "# Initialize the tuner\n",
        "tuner = RandomSearch(\n",
        "    build_model,\n",
        "    objective='val_accuracy',\n",
        "    max_trials=3,  # Number of trials for hyperparameter tuning\n",
        "    executions_per_trial=2,  # Number of model evaluations for each trial\n",
        "    directory='hyperparam_tuning',\n",
        "    project_name='mnist_tuning')\n",
        "\n",
        "# Display the search space\n",
        "tuner.search_space_summary()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EjI_m_1VnCTO",
        "outputId": "c62ce48a-2a0c-4822-fecc-4a1072a0a204"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Reloading Tuner from hyperparam_tuning/mnist_tuning/tuner0.json\n",
            "Search space summary\n",
            "Default search space size: 3\n",
            "filters (Int)\n",
            "{'default': None, 'conditions': [], 'min_value': 32, 'max_value': 128, 'step': 32, 'sampling': 'linear'}\n",
            "units (Int)\n",
            "{'default': None, 'conditions': [], 'min_value': 32, 'max_value': 512, 'step': 32, 'sampling': 'linear'}\n",
            "learning_rate (Choice)\n",
            "{'default': 0.01, 'conditions': [], 'values': [0.01, 0.001, 0.0001], 'ordered': True}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from kerastuner.tuners import RandomSearch\n",
        "\n",
        "# Initialize the tuner\n",
        "tuner = RandomSearch(\n",
        "    build_model,\n",
        "    objective='val_accuracy',\n",
        "    max_trials=10,  # Number of trials for hyperparameter tuning\n",
        "    executions_per_trial=2,  # Number of model evaluations for each trial\n",
        "    directory='hyperparam_tuning',\n",
        "    project_name='mnist_tuning')\n",
        "\n",
        "# Display the search space\n",
        "tuner.search_space_summary()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LvbLZ2c9nFac",
        "outputId": "07acc40b-dd6d-447c-a4fd-0a634a329f52"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Reloading Tuner from hyperparam_tuning/mnist_tuning/tuner0.json\n",
            "Search space summary\n",
            "Default search space size: 3\n",
            "filters (Int)\n",
            "{'default': None, 'conditions': [], 'min_value': 32, 'max_value': 128, 'step': 32, 'sampling': 'linear'}\n",
            "units (Int)\n",
            "{'default': None, 'conditions': [], 'min_value': 32, 'max_value': 512, 'step': 32, 'sampling': 'linear'}\n",
            "learning_rate (Choice)\n",
            "{'default': 0.01, 'conditions': [], 'values': [0.01, 0.001, 0.0001], 'ordered': True}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Run the hyperparameter search\n",
        "tuner.search(train_images, train_labels, epochs=10, validation_data=(val_images, val_labels))\n",
        "\n",
        "# Get the best hyperparameters\n",
        "best_hps = tuner.get_best_hyperparameters(num_trials=1)[0]\n",
        "\n",
        "print(f\"Best hyperparameters: {best_hps.values}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Hk7bvC9FnIfc",
        "outputId": "1a0d4c5e-9808-44b0-ebb8-4ef376ec25c9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Trial 10 Complete [00h 02m 39s]\n",
            "val_accuracy: 0.9882083535194397\n",
            "\n",
            "Best val_accuracy So Far: 0.9890000224113464\n",
            "Total elapsed time: 00h 23m 49s\n",
            "Best hyperparameters: {'filters': 64, 'units': 448, 'learning_rate': 0.001}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Build the best model\n",
        "best_model = tuner.hypermodel.build(best_hps)\n",
        "\n",
        "# Train the best model\n",
        "history = best_model.fit(train_images, train_labels, epochs=10, validation_data=(val_images, val_labels))\n",
        "\n",
        "# Evaluate on test data\n",
        "test_loss, test_acc = best_model.evaluate(test_images, test_labels)\n",
        "print(f\"Test accuracy: {test_acc}\")\n",
        "\n",
        "# Save the model\n",
        "best_model.save('best_mnist_model.h5')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZWWJi-GVnKgT",
        "outputId": "fce69545-9cec-449f-db3a-fedc3e450f42"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 4ms/step - accuracy: 0.9215 - loss: 0.2571 - val_accuracy: 0.9809 - val_loss: 0.0612\n",
            "Epoch 2/10\n",
            "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - accuracy: 0.9865 - loss: 0.0440 - val_accuracy: 0.9838 - val_loss: 0.0510\n",
            "Epoch 3/10\n",
            "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 4ms/step - accuracy: 0.9930 - loss: 0.0213 - val_accuracy: 0.9865 - val_loss: 0.0478\n",
            "Epoch 4/10\n",
            "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - accuracy: 0.9963 - loss: 0.0109 - val_accuracy: 0.9884 - val_loss: 0.0465\n",
            "Epoch 5/10\n",
            "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 4ms/step - accuracy: 0.9975 - loss: 0.0083 - val_accuracy: 0.9894 - val_loss: 0.0430\n",
            "Epoch 6/10\n",
            "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 3ms/step - accuracy: 0.9977 - loss: 0.0064 - val_accuracy: 0.9885 - val_loss: 0.0492\n",
            "Epoch 7/10\n",
            "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 4ms/step - accuracy: 0.9988 - loss: 0.0042 - val_accuracy: 0.9849 - val_loss: 0.0650\n",
            "Epoch 8/10\n",
            "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - accuracy: 0.9989 - loss: 0.0038 - val_accuracy: 0.9872 - val_loss: 0.0543\n",
            "Epoch 9/10\n",
            "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 4ms/step - accuracy: 0.9987 - loss: 0.0037 - val_accuracy: 0.9892 - val_loss: 0.0525\n",
            "Epoch 10/10\n",
            "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - accuracy: 0.9984 - loss: 0.0047 - val_accuracy: 0.9886 - val_loss: 0.0536\n",
            "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9835 - loss: 0.0735\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test accuracy: 0.9868999719619751\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for layer in best_model.layers[:3]:\n",
        "    layer.trainable = True\n",
        "\n",
        "# Recompile and train with a lower learning rate\n",
        "best_model.compile(optimizer=tf.keras.optimizers.Adam(1e-5),\n",
        "                   loss='categorical_crossentropy',\n",
        "                   metrics=['accuracy'])\n",
        "\n",
        "history_finetune = best_model.fit(train_images, train_labels, epochs=5, validation_data=(val_images, val_labels))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nFO8xWyAszH0",
        "outputId": "9fbba192-b522-476e-f1c6-70cbd96e5698"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 4ms/step - accuracy: 0.9995 - loss: 0.0019 - val_accuracy: 0.9899 - val_loss: 0.0501\n",
            "Epoch 2/5\n",
            "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - accuracy: 0.9998 - loss: 0.0010 - val_accuracy: 0.9904 - val_loss: 0.0494\n",
            "Epoch 3/5\n",
            "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - accuracy: 0.9999 - loss: 5.6356e-04 - val_accuracy: 0.9907 - val_loss: 0.0492\n",
            "Epoch 4/5\n",
            "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 4ms/step - accuracy: 0.9999 - loss: 4.6541e-04 - val_accuracy: 0.9909 - val_loss: 0.0491\n",
            "Epoch 5/5\n",
            "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - accuracy: 0.9999 - loss: 4.4293e-04 - val_accuracy: 0.9906 - val_loss: 0.0490\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Plot training and validation accuracy\n",
        "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.title('Model Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "Zn8uyMBwtKbh",
        "outputId": "d76ec82d-3359-4b2b-c0ae-a5f4c4da87f3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "import numpy as np\n",
        "from PIL import Image\n",
        "import matplotlib.pyplot as plt\n",
        "from tensorflow.keras.models import load_model\n",
        "\n",
        "# Load the trained model (replace 'best_mnist_model.h5' with your model file)\n",
        "best_model = load_model('best_mnist_model.h5')\n",
        "\n",
        "# Prompt the user to upload an image\n",
        "uploaded = files.upload()\n",
        "\n",
        "# Loop through the uploaded files and process the image\n",
        "for file_name in uploaded.keys():\n",
        "    # Open the uploaded image and convert it to grayscale\n",
        "    img = Image.open(file_name).convert('L')  # Convert to grayscale\n",
        "    img_resized = img.resize((28, 28))  # Resize the image to 28x28 pixels\n",
        "\n",
        "    # Prepare the image for prediction\n",
        "    img_array = np.array(img_resized).reshape(1, 28, 28, 1) / 255.0  # Reshape and normalize\n",
        "\n",
        "    # Make the prediction using the trained model\n",
        "    prediction = np.argmax(best_model.predict(img_array))\n",
        "\n",
        "    # Display the uploaded image and the predicted result\n",
        "    plt.figure(figsize=(4, 4))\n",
        "    plt.imshow(img_resized, cmap='gray')\n",
        "    plt.title(f\"Predicted Digit: {prediction}\")\n",
        "    plt.axis('off')\n",
        "    plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 478
        },
        "id": "VaT6rim5tXf3",
        "outputId": "8356277e-1536-4046-dca8-7973d0eb4fd4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-c772541f-aa82-4c82-b9c9-44250444c079\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-c772541f-aa82-4c82-b9c9-44250444c079\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving 6.jpg to 6 (1).jpg\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 129ms/step\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "gs1U23wEuMCa"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}